---- Create Database ----
CREATE DATABASE amazon_product_catalog;
------ Use Database -------
USE amazon_product_catalog;
------- Create Tables -------
CREATE TABLE Categories(
category_id INT PRIMARY KEY,
category_name VARCHAR(255) NOT NULL
);

CREATE TABLE Sellers(
seller_id INT PRIMARY KEY,
seller_name VARCHAR(255) NOT NULL,
seller_rating DECIMAL (3,2)
);

CREATE TABLE Products(
product_id INT PRIMARY KEY,
product_name VARCHAR(255) NOT NULL,
category_id INT,
price DECIMAL(10,2),
rating DECIMAL(3,2),
review_count INT,
seller_id INT,
FOREIGN KEY (category_id) REFERENCES Categories(category_id),
FOREIGN KEY (seller_id) REFERENCES Sellers(seller_id)

);

CREATE TABLE Reviews(
review_id INT PRIMARY KEY,
product_id INT,
review_text TEXT,
review_rating DECIMAL(3,2),
review_date DATE,
FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-------- Insert the data into tables ---------
-- Insert Sample Data into Categories --
INSERT INTO Categories (category_id, category_name) VALUES
(1, 'Electronics'),
(2, 'Books'),
(3, 'Home & Kitchen'),
(4, 'Fashion'),
(5, 'Sports & Outdoors'),
(6, 'Toys & Games'),
(7, 'Health & Personal Care'),
(8, 'Automotive');

SELECT * FROM Categories;

-- Insert Sample Data into Sellers --
INSERT INTO Sellers (seller_id, seller_name, seller_rating) VALUES
(101, 'TechWorld', 4.5),
(102, 'BookLand', 4.7),
(103, 'HomeEssentials', 4.3),
(104, 'FashionHub', 4.6),
(105, 'OutdoorGear', 4.4),
(106, 'ToyWorld', 4.8),
(107, 'HealthPlus', 4.7),
(108, 'AutoParts', 4.3);

SELECT * FROM Sellers;

-- Insert Sample Data into Products --
INSERT INTO Products (product_id, product_name, category_id, price, rating, review_count, seller_id) VALUES
(1001, 'Smartphone IPhone 16Pro Maz', 1, 699.99, 4.6, 1200, 101),
(1002, 'Laptop Macbook Pro', 1, 1299.99, 4.7, 800, 101),
(1003, 'Python Programming Book', 2, 39.99, 4.8, 500, 102),
(1004, 'Coffee Maker', 3, 49.99, 4.4, 300, 103),
(1005, 'Wireless Earbuds', 1, 99.99, 4.5, 1500, 101),
(1006, 'Yoga Mat', 5, 29.99, 4.6, 700, 105),
(1007, 'Action Camera', 1, 199.99, 4.7, 1200, 101),
(1008, 'Board Game', 6, 49.99, 4.8, 600, 106),
(1009, 'Vitamin C Supplements', 7, 19.99, 4.4, 900, 107),
(1010, 'Car Phone Mount', 8, 14.99, 4.3, 500, 108),
(1011, 'Running Shoes', 4, 79.99, 4.7, 1300, 104),
(1012, 'Bluetooth Speaker', 1, 59.99, 4.6, 1100, 101),
(1013, 'Camping Tent', 5, 149.99, 4.5, 800, 105),
(1014, 'LEGO Set', 6, 89.99, 4.9, 1000, 106);

SELECT * FROM Products;

-- Insert Sample Data into Reviews --
INSERT INTO Reviews (review_id, product_id, review_text, review_rating, review_date) VALUES
(1, 1001, 'Great phone with excellent camera!', 4.5, '2023-10-01'),
(2, 1001, 'Battery life could be better.', 3.8, '2023-10-05'),
(3, 1003, 'Best Python book for beginners.', 4.9, '2023-09-15'),
(4, 1005, 'Great sound quality and battery life!', 4.6, '2023-10-10'),
(5, 1005, 'Comfortable fit, but connectivity issues sometimes.', 3.9, '2023-10-12'),
(6, 1006, 'Perfect for yoga and workouts!', 4.7, '2023-09-20'),
(7, 1007, 'Amazing camera quality, worth the price.', 4.8, '2023-10-05'),
(8, 1008, 'Fun game for family nights!', 4.9, '2023-09-25'),
(9, 1009, 'Helped boost my immunity.', 4.5, '2023-10-01'),
(10, 1010, 'Sturdy and easy to install.', 4.4, '2023-09-15'),
(11, 1011, 'Very comfortable for long runs.', 4.7, '2023-10-08'),
(12, 1012, 'Good sound, but battery could last longer.', 4.3, '2023-10-03'),
(13, 1013, 'Spacious and durable tent.', 4.6, '2023-09-30'),
(14, 1014, 'My kids love this LEGO set!', 4.9, '2023-10-07');

SELECT * FROM Reviews;

------ SQL Queries for Analysis ------
## Retrieve all products in the 'Electronics' category
SELECT p.product_name , p.price , p.rating
FROM Products p
JOIN Categories c ON p.category_id  = c.category_id
WHERE c.category_name = 'Electronics'; 

## Find the average rating of products sold by each seller:
SELECT s.seller_name , AVG(p.rating) AS avg_rating
FROM Products p
JOIN Sellers s ON p.seller_id  = s.seller_id
GROUP BY s.seller_name;

## Get the top 3 products with the highest number of reviews:
SELECT product_name, review_count
FROM Products
ORDER BY review_count DESC
LIMIT 3;

## Retrieve all reviews for a specific product (e.g., Smartphone X):
SELECT r.review_text, r.review_rating, r.review_date
FROM Reviews r
JOIN Products p ON r.product_id = p.product_id
WHERE p.product_name = 'Smartphone IPhone 16Pro Maz';

## Find the total revenue generated by each category:
SELECT c.category_name, SUM(p.price * p.review_count) AS total_revenue
FROM Products p
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name;


